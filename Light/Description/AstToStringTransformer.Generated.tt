<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)\$packages\ICSharpCode.NRefactory.5.0.1\lib\Net40\ICSharpCode.NRefactory.dll" #>
<#@ assembly name="$(SolutionDir)\$packages\ICSharpCode.NRefactory.5.0.1\lib\Net40\ICSharpCode.NRefactory.CSharp.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="ICSharpCode.NRefactory.CSharp" #>

<#
var projectFile = Host.ResolvePath(@"..\Light.csproj");
var files = XDocument.Load(projectFile)
                     .Descendants("{http://schemas.microsoft.com/developer/msbuild/2003}Compile")
                     .Attributes("Include")
                     .Select(a => Host.ResolvePath(Path.Combine(@"..\", a.Value)));

var parser = new CSharpParser();
var classes = files.Select(f => parser.Parse(File.ReadAllText(f), f))
                   .SelectMany(ast => ast.Descendants.OfType<TypeDeclaration>())
                   .Where(t => t.ClassType == ClassType.Class
                            && !t.HasModifier(Modifiers.Abstract));

var astElementTypes = classes.Where(c => c.BaseTypes.OfType<SimpleType>().Any(t => t.Identifier.StartsWith("IAst") || t.Identifier == "AstElementBase"));

var namespaces = astElementTypes.Select(t => t.Ancestors.OfType<NamespaceDeclaration>().First().FullName).Distinct();

Func<string, string> toCamelCase = s => Char.ToLowerInvariant(s[0]) + s.Substring(1);
var visitable = astElementTypes.Select(c => c.Name)
                               .Select(n => new {
                                   TypeName = n,
                                   MethodName = "Append" + n.Replace("Ast", ""),
                                   VariableName = toCamelCase(n.Replace("Ast", ""))
                               })
                               .OrderBy(x => x.TypeName)
                               .ToArray();
#>

using System.Text;
<# foreach (var @namespace in namespaces) { #>
using <#= @namespace #>;
<# } #>

namespace Light.Description {
    partial class AstToStringTransformer {
        protected void Append(StringBuilder builder, IAstElement element) {
            <# foreach (var x in visitable) { 
            #>var <#= x.VariableName #> = element as <#= x.TypeName #>;
            if (<#= x.VariableName #> != null) {
                <#= x.MethodName #>(builder, <#= x.VariableName #>);
                return;
            }
			
            <# }			
        #>builder.Append(element);
        }

        <# foreach (var x in visitable) {			
      #>protected virtual void <#= x.MethodName #>(StringBuilder builder, <#= x.TypeName #> <#= x.VariableName #>) {
            builder.Append(<#= x.VariableName #>);
        }

        <# }
  #>}
}