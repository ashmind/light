import System
import System.Collections.Generic
import System.IO
import System.Linq
import System.Text.RegularExpressions

let punctuation = [ ',', '.', '?', '!', ':', ';' ]
let number = "(?:(?<!no ?)one|two|three|four|five|six|ten|eleven|twelve|(?:thir|four|fif|seven|eight|nine)teen|twenty|\d{,2})"
let time = "(?:year|month|day|hour|minute|second)s?"
let distance = "(?:met(?:re|er))s?"

let rules = [
    new RegexRule("(?:.*)if (.+), you (must|can|should) (.+)", "What $2 you do when $1?|$3"),
    new RegexRule("(?:.*)you (must|can|should) (.+) (?<!see )if (.+)", "What $1 you do when $3?|$2"),
    new RegexRule("(.+) are (\w+)d by (.+)",  "Who $2s $1?|$3"),
    new RegexRule("(?:.*)when ((?:[^,]|, or)+),(?! it)(?! the) ([^,]+)",  "What should be done when $1?|$2"),

    # numbers:
    new Alternative {
        Rules : [ 
            new RegexRule("(.+) period of (" + number + " " + time + ").*", "$1 what period?|$2"),
            # new RegexRule("(.+) (" + number + " " + time + ").*", "$1 how long?|$2"),
            new RegexRule("(.+) (" + number + " " + distance + ") (.+)", "$1 how far $3?|$2"),
            new RegexRule("(.+) (" + number + "(?: or more)?) (.+)", "$1 how many $3?|$2")
        ]
    }
]

let files = Directory.GetFiles("d:\Development\VS 2010\HtmlToText\bin\Debug\text\", "*.*", SearchOption.AllDirectories)
let sentences = files.Select(f => File.ReadAllText(f)).SelectMany(t => t.Split('.')).Select(s => s.Trim())

for sentence in sentences.Skip(100).Take(100) do
    for rule in rules do
        let result = rule.GetQuestionsAndAnswersRaw(sentence)
        if result.Length == 0
            continue

        Console.ForegroundColor = ConsoleColor.White
        Console.WriteLine(sentence)
        Console.ResetColor()

        let question = ToSentenceCase(result[0].question).TrimEnd(punctuation) + '?'
        let answer = ToSentenceCase(result[0].answer).TrimEnd(punctuation) + '.'

        Console.WriteLine("Q: {0}", question)
        Console.WriteLine("A: {0}", answer)
        Console.WriteLine()
    end
end

function ToSentenceCase(string value)
    value = value.Trim()
    return Char.ToUpperInvariant(value[0]) + value.Substring(1, value.Length - 1).ToLowerInvariant()
end

interface IRule
    function GetQuestionsAndAnswersRaw(string sentence)
end

class RegexRule
    public string Pattern
    public string Replacement

    public new(string pattern, string replacement)
        Pattern = pattern
        Replacement = replacement
    end
    
    public function GetQuestionsAndAnswersRaw(string sentence)
        unless Regex.IsMatch(sentence, Pattern, RegexOptions.IgnoreCase | RegexOptions.Singleline)
            return []

        let parts = Regex.Replace(sentence, Pattern, Replacement, RegexOptions.IgnoreCase | RegexOptions.Singleline).Split('|')
        return [{ question: parts[0], answer: parts[1] }]
    end
end

class Alternative
    public IList<Rule> Rules = new List<Rule>()

    public function GetQuestionsAndAnswersRaw(string sentence)
        let first = Rules.Select(r => r.GetQuestionsAndAnswersRaw(sentence)).FirstOrDefault(x => x.Any())
        if first == null
            return []

        return first
    end
end